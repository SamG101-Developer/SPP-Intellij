// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _SppLexer.flex

package org.intellij.sdk.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.intellij.sdk.language.psi.SppTypes.*;


public class _SppLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\1\3\1\4\1\5"+
    "\1\0\1\6\1\7\1\0\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\10\22\1\23"+
    "\1\0\1\24\1\25\1\26\1\27\1\30\6\31\2\32"+
    "\1\33\11\32\1\34\1\35\6\32\1\36\1\0\1\37"+
    "\1\40\1\41\1\0\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\53\1\62\1\63\1\64\1\65"+
    "\1\53\1\66\1\67\1\70\1\53\1\71\1\72\1\73"+
    "\7\0\1\2\32\0\1\1\u01df\0\1\1\177\0\13\1"+
    "\35\0\2\2\5\0\1\1\57\0\1\1\240\0\1\1"+
    "\377\0\u0100\74";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\3\25\1\26"+
    "\1\27\1\30\1\31\17\32\1\33\1\34\1\35\1\36"+
    "\1\0\1\37\2\3\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\4\0\1\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\2\25\1\62"+
    "\1\63\7\32\1\64\4\32\1\65\1\0\10\32\1\66"+
    "\1\67\1\0\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\1\102\2\25\2\32\1\103"+
    "\1\104\2\32\1\105\1\106\1\107\1\32\1\110\1\111"+
    "\1\112\1\113\1\32\1\114\2\32\1\115\2\32\1\116"+
    "\2\0\1\117\1\120\1\121\1\122\1\32\1\123\1\124"+
    "\1\32\1\125\1\126\1\127\1\130\1\32\1\131\1\132"+
    "\1\133\1\134\1\135";

  private static int [] zzUnpackAction() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\75\0\75\0\u01e8\0\u0225\0\75\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\75"+
    "\0\u04c4\0\u0501\0\u053e\0\75\0\75\0\u057b\0\75\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\75\0\u094b"+
    "\0\75\0\75\0\364\0\75\0\u0988\0\u09c5\0\u0a02\0\75"+
    "\0\u0a3f\0\75\0\u0a7c\0\75\0\75\0\75\0\75\0\75"+
    "\0\75\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\75\0\u0bad\0\u0bea"+
    "\0\75\0\75\0\u0c27\0\75\0\u0c64\0\u0ca1\0\75\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u05f5"+
    "\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u05f5\0\u0fba\0\u0ff7\0\u1034"+
    "\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\75\0\u11df"+
    "\0\u121c\0\75\0\75\0\75\0\u1259\0\u0b33\0\u0b70\0\u1296"+
    "\0\75\0\75\0\75\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7"+
    "\0\u05f5\0\u05f5\0\u1404\0\u1441\0\u05f5\0\u05f5\0\u05f5\0\u147e"+
    "\0\u05f5\0\u05f5\0\u0fba\0\u05f5\0\u14bb\0\u05f5\0\u14f8\0\u1535"+
    "\0\u05f5\0\u1572\0\u15af\0\75\0\u15ec\0\u1259\0\75\0\75"+
    "\0\u04c4\0\u04c4\0\u1629\0\u05f5\0\u05f5\0\u1666\0\u05f5\0\u05f5"+
    "\0\u05f5\0\u05f5\0\u16a3\0\u05f5\0\75\0\u05f5\0\u05f5\0\u05f5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\1\30\3\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\41\1\43\1\44\1\45\1\41\1\46\2\41"+
    "\1\47\1\50\1\41\1\51\1\41\1\52\1\53\1\54"+
    "\1\55\1\56\2\41\1\57\1\60\1\61\1\2\76\0"+
    "\2\3\117\0\1\62\47\0\4\63\1\64\70\63\2\65"+
    "\1\0\2\65\1\66\66\65\7\0\1\67\16\0\1\70"+
    "\56\0\1\71\15\0\1\72\61\0\1\73\12\0\1\74"+
    "\74\0\1\75\74\0\1\76\1\77\64\0\1\100\103\0"+
    "\1\101\65\0\1\102\1\0\3\22\16\0\1\103\1\0"+
    "\1\104\23\0\1\105\23\0\1\102\1\0\3\22\16\0"+
    "\1\103\56\0\1\106\75\0\1\107\1\110\74\0\1\111"+
    "\74\0\1\112\1\113\75\0\1\114\65\0\3\31\6\0"+
    "\5\31\3\0\30\31\24\0\3\31\6\0\5\31\3\0"+
    "\5\31\1\115\22\31\24\0\3\31\6\0\5\31\3\0"+
    "\13\31\1\116\14\31\31\0\1\117\67\0\3\41\6\0"+
    "\5\41\3\0\22\41\1\120\5\41\24\0\3\41\6\0"+
    "\5\41\3\0\30\41\24\0\3\41\6\0\5\41\3\0"+
    "\1\41\1\121\12\41\1\122\2\41\1\123\10\41\24\0"+
    "\3\41\6\0\5\41\3\0\14\41\1\124\13\41\24\0"+
    "\3\41\6\0\5\41\3\0\1\41\1\125\22\41\1\126"+
    "\3\41\24\0\3\41\6\0\5\41\3\0\5\41\1\127"+
    "\22\41\24\0\3\41\6\0\5\41\3\0\22\41\1\130"+
    "\5\41\24\0\3\41\6\0\5\41\3\0\5\41\1\131"+
    "\11\41\1\132\10\41\24\0\3\41\6\0\5\41\3\0"+
    "\17\41\1\133\4\41\1\134\3\41\24\0\3\41\6\0"+
    "\5\41\3\0\16\41\1\135\11\41\10\0\1\136\13\0"+
    "\3\41\6\0\5\41\3\0\5\41\1\137\22\41\24\0"+
    "\3\41\6\0\5\41\3\0\5\41\1\140\16\41\1\141"+
    "\3\41\24\0\3\41\6\0\5\41\3\0\10\41\1\142"+
    "\10\41\1\143\6\41\24\0\3\41\6\0\5\41\3\0"+
    "\22\41\1\144\5\41\24\0\3\41\6\0\5\41\3\0"+
    "\10\41\1\145\1\146\16\41\31\0\1\147\44\0\1\150"+
    "\2\0\2\65\1\0\71\65\1\0\2\66\1\151\2\66"+
    "\1\65\66\66\1\151\25\0\1\152\74\0\1\153\74\0"+
    "\1\154\67\0\3\155\72\0\3\22\16\0\1\103\53\0"+
    "\2\156\73\0\3\157\6\0\1\157\10\0\6\157\51\0"+
    "\1\160\1\161\75\0\1\162\73\0\1\163\1\164\66\0"+
    "\3\31\6\0\5\31\3\0\14\31\1\165\13\31\24\0"+
    "\3\31\6\0\2\31\1\166\2\31\3\0\30\31\24\0"+
    "\3\41\6\0\5\41\3\0\27\41\1\167\24\0\3\41"+
    "\6\0\5\41\3\0\22\41\1\170\5\41\24\0\3\41"+
    "\6\0\5\41\3\0\22\41\1\171\5\41\24\0\3\41"+
    "\6\0\5\41\3\0\21\41\1\172\6\41\24\0\3\41"+
    "\6\0\5\41\3\0\22\41\1\173\5\41\24\0\3\41"+
    "\6\0\5\41\3\0\14\41\1\174\13\41\24\0\3\41"+
    "\6\0\5\41\3\0\16\41\1\175\11\41\24\0\3\41"+
    "\6\0\5\41\3\0\16\41\1\176\11\41\24\0\3\41"+
    "\6\0\5\41\3\0\23\41\1\177\4\41\24\0\3\41"+
    "\6\0\5\41\3\0\17\41\1\200\10\41\24\0\3\41"+
    "\6\0\5\41\3\0\4\41\1\201\23\41\24\0\3\41"+
    "\6\0\5\41\3\0\23\41\1\202\4\41\4\0\2\136"+
    "\1\0\1\136\1\203\67\136\21\0\3\41\6\0\5\41"+
    "\3\0\23\41\1\204\4\41\24\0\3\41\6\0\5\41"+
    "\3\0\14\41\1\205\13\41\24\0\3\41\6\0\5\41"+
    "\3\0\20\41\1\206\7\41\24\0\3\41\6\0\5\41"+
    "\3\0\5\41\1\207\22\41\24\0\3\41\6\0\5\41"+
    "\3\0\24\41\1\210\3\41\24\0\3\41\6\0\5\41"+
    "\3\0\5\41\1\211\22\41\24\0\3\41\6\0\5\41"+
    "\3\0\5\41\1\212\22\41\24\0\3\41\6\0\5\41"+
    "\3\0\23\41\1\213\4\41\31\0\1\214\47\0\5\151"+
    "\1\215\67\151\20\0\3\155\16\0\1\216\60\0\1\217"+
    "\74\0\1\220\67\0\3\31\6\0\5\31\3\0\6\31"+
    "\1\221\21\31\24\0\3\31\6\0\5\31\3\0\22\31"+
    "\1\222\5\31\24\0\3\41\6\0\5\41\3\0\16\41"+
    "\1\223\11\41\24\0\3\41\6\0\5\41\3\0\5\41"+
    "\1\224\22\41\24\0\3\41\6\0\5\41\3\0\5\41"+
    "\1\225\22\41\24\0\3\41\6\0\5\41\3\0\22\41"+
    "\1\226\5\41\24\0\3\41\6\0\5\41\3\0\20\41"+
    "\1\227\7\41\24\0\3\41\6\0\5\41\3\0\6\41"+
    "\1\230\21\41\24\0\3\41\6\0\5\41\3\0\16\41"+
    "\1\231\11\41\24\0\3\41\6\0\5\41\3\0\5\41"+
    "\1\232\22\41\24\0\3\41\6\0\5\41\3\0\21\41"+
    "\1\233\6\41\24\0\3\41\6\0\5\41\3\0\10\41"+
    "\1\234\17\41\11\0\1\235\107\0\3\41\6\0\5\41"+
    "\3\0\3\41\1\236\24\41\24\0\3\41\6\0\5\41"+
    "\3\0\5\41\1\237\22\41\24\0\3\41\6\0\5\41"+
    "\3\0\5\41\1\240\22\41\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5856];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\2\11\2\1\1\11\12\1\1\11"+
    "\3\1\2\11\1\1\1\11\17\1\1\11\1\1\2\11"+
    "\1\0\1\11\3\1\1\11\1\1\1\11\1\1\6\11"+
    "\4\0\1\11\2\1\2\11\1\1\1\11\2\1\1\11"+
    "\16\1\1\0\10\1\1\11\1\1\1\0\3\11\4\1"+
    "\3\11\30\1\1\11\2\0\2\11\14\1\1\11\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[160];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _SppLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _SppLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 94: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 95: break;
          case 3:
            { return LINE_COMMENT;
            }
          // fall through
          case 96: break;
          case 4:
            { return TKREM;
            }
          // fall through
          case 97: break;
          case 5:
            { return TKBITAND;
            }
          // fall through
          case 98: break;
          case 6:
            { return TKPARENL;
            }
          // fall through
          case 99: break;
          case 7:
            { return TKPARENR;
            }
          // fall through
          case 100: break;
          case 8:
            { return TKMUL;
            }
          // fall through
          case 101: break;
          case 9:
            { return TKADD;
            }
          // fall through
          case 102: break;
          case 10:
            { return TKCOMMA;
            }
          // fall through
          case 103: break;
          case 11:
            { return TKSUB;
            }
          // fall through
          case 104: break;
          case 12:
            { return TKDOT;
            }
          // fall through
          case 105: break;
          case 13:
            { return TKDIV;
            }
          // fall through
          case 106: break;
          case 14:
            { return LXDECINTEGER;
            }
          // fall through
          case 107: break;
          case 15:
            { return TKCOLON;
            }
          // fall through
          case 108: break;
          case 16:
            { return TKLT;
            }
          // fall through
          case 109: break;
          case 17:
            { return TKASSIGN;
            }
          // fall through
          case 110: break;
          case 18:
            { return TKGT;
            }
          // fall through
          case 111: break;
          case 19:
            { return TKQST;
            }
          // fall through
          case 112: break;
          case 20:
            { return TKAT;
            }
          // fall through
          case 113: break;
          case 21:
            { return LXUPPERIDENTIFIER;
            }
          // fall through
          case 114: break;
          case 22:
            { return TKBRACKL;
            }
          // fall through
          case 115: break;
          case 23:
            { return TKBRACKR;
            }
          // fall through
          case 116: break;
          case 24:
            { return TKBITXOR;
            }
          // fall through
          case 117: break;
          case 25:
            { return TKUNDERSCORE;
            }
          // fall through
          case 118: break;
          case 26:
            { return LXIDENTIFIER;
            }
          // fall through
          case 119: break;
          case 27:
            { return TKBRACEL;
            }
          // fall through
          case 120: break;
          case 28:
            { return TKBITOR;
            }
          // fall through
          case 121: break;
          case 29:
            { return TKBRACER;
            }
          // fall through
          case 122: break;
          case 30:
            { return TKNE;
            }
          // fall through
          case 123: break;
          case 31:
            { return LXDOUBLEQUOTESTR;
            }
          // fall through
          case 124: break;
          case 32:
            { return TKMOD;
            }
          // fall through
          case 125: break;
          case 33:
            { return TKREMASSIGN;
            }
          // fall through
          case 126: break;
          case 34:
            { return TKLOGICALAND;
            }
          // fall through
          case 127: break;
          case 35:
            { return TKBITANDASSIGN;
            }
          // fall through
          case 128: break;
          case 36:
            { return TKEXP;
            }
          // fall through
          case 129: break;
          case 37:
            { return TKMULASSIGN;
            }
          // fall through
          case 130: break;
          case 38:
            { return TKADDASSIGN;
            }
          // fall through
          case 131: break;
          case 39:
            { return TKSUBASSIGN;
            }
          // fall through
          case 132: break;
          case 40:
            { return TKARROWR;
            }
          // fall through
          case 133: break;
          case 41:
            { return TKVARIADIC;
            }
          // fall through
          case 134: break;
          case 42:
            { return TKDIVASSIGN;
            }
          // fall through
          case 135: break;
          case 43:
            { return TKDBLCOLON;
            }
          // fall through
          case 136: break;
          case 44:
            { return TKBITSHIFTL;
            }
          // fall through
          case 137: break;
          case 45:
            { return TKLE;
            }
          // fall through
          case 138: break;
          case 46:
            { return TKEQ;
            }
          // fall through
          case 139: break;
          case 47:
            { return TKGE;
            }
          // fall through
          case 140: break;
          case 48:
            { return TKBITSHIFTR;
            }
          // fall through
          case 141: break;
          case 49:
            { return TKCOALESCE;
            }
          // fall through
          case 142: break;
          case 50:
            { return TKBITXORASSIGN;
            }
          // fall through
          case 143: break;
          case 51:
            { return KWAS;
            }
          // fall through
          case 144: break;
          case 52:
            { return KWIS;
            }
          // fall through
          case 145: break;
          case 53:
            { return KWON;
            }
          // fall through
          case 146: break;
          case 54:
            { return TKBITORASSIGN;
            }
          // fall through
          case 147: break;
          case 55:
            { return TKLOGICALOR;
            }
          // fall through
          case 148: break;
          case 56:
            { return TKMODASSIGN;
            }
          // fall through
          case 149: break;
          case 57:
            { return TKLOGICALANDASSIGN;
            }
          // fall through
          case 150: break;
          case 58:
            { return TKEXPASSIGN;
            }
          // fall through
          case 151: break;
          case 59:
            { return LXDECDECIMAL;
            }
          // fall through
          case 152: break;
          case 60:
            { return LXBINDIGITS;
            }
          // fall through
          case 153: break;
          case 61:
            { return LXHEXDIGITS;
            }
          // fall through
          case 154: break;
          case 62:
            { return TKBITROTATEL;
            }
          // fall through
          case 155: break;
          case 63:
            { return TKBITSHIFTLASSIGN;
            }
          // fall through
          case 156: break;
          case 64:
            { return TKSS;
            }
          // fall through
          case 157: break;
          case 65:
            { return TKBITSHIFTRASSIGN;
            }
          // fall through
          case 158: break;
          case 66:
            { return TKBITROTATER;
            }
          // fall through
          case 159: break;
          case 67:
            { return KWCLS;
            }
          // fall through
          case 160: break;
          case 68:
            { return KWCOR;
            }
          // fall through
          case 161: break;
          case 69:
            { return KWFUN;
            }
          // fall through
          case 162: break;
          case 70:
            { return KWGEN;
            }
          // fall through
          case 163: break;
          case 71:
            { return KWLET;
            }
          // fall through
          case 164: break;
          case 72:
            { return KWMOD;
            }
          // fall through
          case 165: break;
          case 73:
            { return KWMUT;
            }
          // fall through
          case 166: break;
          case 74:
            { return LXREGEX;
            }
          // fall through
          case 167: break;
          case 75:
            { return KWRET;
            }
          // fall through
          case 168: break;
          case 76:
            { return KWSUP;
            }
          // fall through
          case 169: break;
          case 77:
            { return KWUSE;
            }
          // fall through
          case 170: break;
          case 78:
            { return TKLOGICALORASSIGN;
            }
          // fall through
          case 171: break;
          case 79:
            { return TKBITROTATELASSIGN;
            }
          // fall through
          case 172: break;
          case 80:
            { return TKBITROTATERASSIGN;
            }
          // fall through
          case 173: break;
          case 81:
            { return KWSELFTYPE;
            }
          // fall through
          case 174: break;
          case 82:
            { return TKIS;
            }
          // fall through
          case 175: break;
          case 83:
            { return KWCASE;
            }
          // fall through
          case 176: break;
          case 84:
            { return KWELSE;
            }
          // fall through
          case 177: break;
          case 85:
            { return KWLOOP;
            }
          // fall through
          case 178: break;
          case 86:
            { return KWSELF;
            }
          // fall through
          case 179: break;
          case 87:
            { return KWTHEN;
            }
          // fall through
          case 180: break;
          case 88:
            { return KWTRUE;
            }
          // fall through
          case 181: break;
          case 89:
            { return KWWITH;
            }
          // fall through
          case 182: break;
          case 90:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 183: break;
          case 91:
            { return KWASYNC;
            }
          // fall through
          case 184: break;
          case 92:
            { return KWFALSE;
            }
          // fall through
          case 185: break;
          case 93:
            { return KWWHERE;
            }
          // fall through
          case 186: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
