{
    parserClass="org.intellij.sdk.language.parser.SppParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Spp"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.intellij.sdk.language.psi.SppTypes"
    elementTypeClass="org.intellij.sdk.language.psi.SppElementType"
    tokenTypeClass="org.intellij.sdk.language.psi.SppTokenType"

    tokens = [
        line_comment = "regexp:#.*"
        block_comment = "regexp:##[^#]*##"

        TkEq = "=="
        TkNe = "!="
        TkLe = "<="
        TkGe = ">="
        TkLt = "<"
        TkGt = ">"
        TkSs = "<=>"
        TkAdd = "+"
        TkSub = "-"
        TkMul = "*"
        TkDiv = "/"
        TkRem = "%"
        TkMod = "%%"
        TkExp = "**"
        TkAddAssign = "+="
        TkSubAssign = "-="
        TkMulAssign = "*="
        TkDivAssign = "/="
        TkRemAssign = "%="
        TkModAssign = "%%="
        TkExpAssign = "**="
        TkParenL = "("
        TkParenR = ")"
        TkBrackL = "["
        TkBrackR = "]"
        TkBraceL = "{"
        TkBraceR = "}"
        TkQst = "?"
        TkVariadic = ".."
        TkColon = ":"
        TkBorrow = "&"
        TkUnion = "|"
        TkDot = "."
        TkDblColon = "::"
        TkComma = ","
        TkAssign = "="
        TkArrowR = "->"
        TkAt = "@"
        TkUnderscore = "_"

        KwCls = "cls"
        KwSup = "sup"
        KwFun = "fun"
        KwCor = "cor"
        KwUse = "use"
        KwExt = "ext"
        KwLet = "let"
        KwMut = "mut"
        KwPin = "pin"
        KwRel = "rel"
        KwCase = "case"
        KwElse = "else"
        KwLoop = "loop"
        KwWith = "with"
        KwSkip = "skip"
        KwExit = "exit"
        KwRet = "ret"
        KwGen = "gen"
        KwWhere = "where"
        KwAs = "as"
        KwIs = "is"
        KwTrue = "true"
        KwFalse = "false"
        KwSelf = "self"
        KwSelfType = "Self"
        KwAnd = "and"
        KwOr = "or"
        KwNot = "not"
        KwIn = "in"
        KwAsync = "async"
        KwThen = "then"

        LxRegex = "regexp:r\".*\""
        LxIdentifier = "regexp:[a-z][_a-zA-Z0-9]*"
        LxUpperIdentifier = "regexp:[A-Z][_a-zA-Z0-9]*"
        LxBinDigits = "regexp:0b[01]+"
        LxHexDigits = "regexp:0x[0-9a-fA-F]+"
        LxDecInteger = "regexp:[0-9]([0-9_]*[0-9])?"
        LxDecDecimal = "regexp:[0-9]([0-9_]*[0-9])?\.[0-9]([0-9_]*[0-9])?"
        LxDoubleQuoteStr = "regexp:\"[^\"]*\""
    ]
}


// Program
Program ::= ModulePrototype <<eof>>

// Module
ModulePrototype ::= Annotation* ModuleImplementation
ModuleImplementation ::= ModuleMember*
ModuleMember ::= FunctionPrototype | ClassPrototype | SupPrototypeNormal | SupPrototypeInheritance | UseStatement | GlobalConstant

// Class
ClassPrototype ::= Annotation* KwCls UpperIdentifier GenericParameters? WhereBlock? ClassImplementation
ClassImplementation ::= TkBraceL ClassMember* TkBraceR
ClassMember ::= ClassAttribute
ClassAttribute ::= Annotation* Identifier TkColon Type

// Superimposition
SupPrototypeNormal ::= KwSup GenericParameters? Type WhereBlock? SupImplementation
SupPrototypeInheritance ::= KwSup GenericParameters? Type KwExt Type WhereBlock? SupImplementation
SupImplementation ::= TkBraceL SupMember* TkBraceR
SupMember ::= SupMethodPrototype | SupTypedef
SupTypedef ::= Annotation* UseStatement
SupMethodPrototype ::= FunctionPrototype

// Function
FunctionPrototype ::= CoroutinePrototype | SubroutinePrototype
SubroutinePrototype ::= Annotation* KwFun Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
CoroutinePrototype ::= Annotation* KwCor Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
FunctionImplementation ::= InnerScope
FunctionParameters ::= TkParenL (FunctionParameter (TkComma FunctionParameter)*)? TkParenR
FunctionParameter ::= FunctionParameterVariadic | FunctionParameterOptional | FunctionParameterRequired | FunctionParameterSelf
FunctionParameterRequired ::= LocalVariable TkColon Convention Type
FunctionParameterOptional ::= LocalVariable TkColon Convention Type TkAssign Expression
FunctionParameterVariadic ::= TkVariadic LocalVariable TkColon Convention Type
FunctionParameterSelf ::= KwMut? Convention KwSelf
FunctionCallArguments ::= TkParenL (FunctionCallArgument (TkComma FunctionCallArgument)*)? TkParenR
FunctionCallArgument ::= FunctionCallArgumentNamed | FunctionCallArgumentNormal
FunctionCallArgumentNormal ::= Convention TkVariadic? Expression
FunctionCallArgumentNamed ::= Identifier TkAssign Convention Expression

// Generics
GenericParameters ::= TkBrackL (GenericParameter (TkComma GenericParameter)*)? TkBrackR
GenericParameter ::= GenericParameterVariadic | GenericParameterOptional | GenericParameterRequired
GenericParameterRequired ::= UpperIdentifier GenericInlineConstraints?
GenericParameterOptional ::= UpperIdentifier GenericInlineConstraints? TkAssign Type
GenericParameterVariadic ::= TkVariadic UpperIdentifier GenericInlineConstraints?
GenericArguments ::= TkBrackL (GenericArgument (TkComma GenericArgument)*)? TkBrackR
GenericArgument ::= GenericArgumentNamed | GenericArgumentNormal
GenericArgumentNormal ::= Type
GenericArgumentNamed ::= UpperIdentifier TkAssign Type

// Constraints
GenericInlineConstraints ::= TkColon (Type (TkAdd Type)*)
WhereBlock ::= KwWhere WhereBlockConstraintsGroup
WhereBlockConstraintsGroup ::= TkBrackL (WhereBlockConstraints (TkComma WhereBlockConstraints)*)? TkBrackR
WhereBlockConstraints ::= Type (TkComma Type)* TkColon Type (TkAdd Type)*

// Annotation
Annotation ::= TkAt Identifier (TkDblColon Identifier)* PostfixOpFunctionCall

// Expressions
Expression ::= BinaryExpressionLevel1
BinaryExpressionLevel1 ::= BinaryExpressionLevel2 (BinaryOpPrecedenceLevel1 BinaryExpressionLevel1)*
BinaryExpressionLevel2 ::= BinaryExpressionLevel3 (BinaryOpPrecedenceLevel2 PatternVariantObjectDestructure)*
BinaryExpressionLevel3 ::= BinaryExpressionLevel4 (BinaryOpPrecedenceLevel3 BinaryExpressionLevel3)*
BinaryExpressionLevel4 ::= BinaryExpressionLevel5 (BinaryOpPrecedenceLevel4 BinaryExpressionLevel4)*
BinaryExpressionLevel5 ::= BinaryExpressionLevel6 (BinaryOpPrecedenceLevel5 BinaryExpressionLevel5)*
BinaryExpressionLevel6 ::= UnaryExpression (BinaryOpPrecedenceLevel6 BinaryExpressionLevel6)*
UnaryExpression ::= UnaryOp* PostfixExpression
PostfixExpression ::= PrimaryExpression PostfixOp*
PrimaryExpression ::= Literal | ObjectInitialization | ParenthesizedExpression | Identifier | Type | CaseExpression | LoopExpression | WithExpression | GenExpression | InnerScope | SelfKeyword | TkVariadic  //  | LambdaPrototype
ParenthesizedExpression ::= TkParenL Expression TkParenR
SelfKeyword ::= KwSelf

// Advanced Expressions
CaseExpression ::= KwCase Expression KwThen PatternStatement+
LoopExpression ::= KwLoop LoopExpressionCondition InnerScope LoopElseExpression?
LoopExpressionCondition ::= LoopExpressionConditionIterable | LoopExpressionConditionBoolean
LoopExpressionConditionBoolean ::= Expression
LoopExpressionConditionIterable ::= LocalVariable TkIn Expression
LoopElseExpression ::= KwElse InnerScope
GenExpression ::= KwGen KwWith? (Convention Expression)?
WithExpression ::= KwWith WithExpressionLhsAlias? Expression InnerScope
WithExpressionLhsAlias ::= LocalVariable TkAssign

// Statements
ReturnStatement ::= KwRet Expression?
ExitStatement ::= KwExit+ (KwSkip | Expression)?
SkipStatement ::= KwSkip
PinStatement ::= KwPin Expression (TkComma Expression)*
RelStatement ::= KwRel Expression (TkComma Expression)*
InnerScope ::= TkBraceL Statement* TkBraceR
Statement ::= UseStatement | LetStatement | ReturnStatement | ExitStatement | SkipStatement | PinStatement | RelStatement | AssignmentStatement | Expression

// Typedef
UseStatement ::= KwUse (UseStatementTypeAlias | UseStatementImport)
UseStatementImport ::= UseStatementImportBody
UseStatementImportMultipleTypes ::= (Identifier TkDblColon)+ TkBraceL UseStatementImportBody (TkComma UseStatementImportBody)* TkBraceR
UseStatementImportSingleType ::= (Identifier TkDblColon)* GenericIdentifier (TkDblColon GenericIdentifier)* UseStatementImportAlias?
UseStatementImportAlias ::= KwAs UpperIdentifier
UseStatementImportBody ::= UseStatementImportMultipleTypes | UseStatementImportSingleType
UseStatementTypeAlias ::= UpperIdentifier GenericParameters? TkAssign Type

// Variables
GlobalConstant ::= KwLet LocalVariableSingleIdentifier TkColon Type TkAssign GlobalConstantValue
LetStatement ::= LetStatementInitialized | LetStatementUninitialized
LetStatementInitialized ::= KwLet LocalVariable TkAssign Expression
LetStatementUninitialized ::= KwLet LocalVariable TkColon Type
LocalVariable ::= LocalVariableSingleIdentifier | LocalVariableTupleDestructure | LocalVariableObjectDestructure
LocalVariableSingleIdentifier ::= KwMut? TkVariadic? Identifier
LocalVariableObjectDestructure ::= TypeSingle TkParenL LocalVariableNestedForObjectDestructure (TkComma LocalVariableNestedForObjectDestructure)* TkParenR
LocalVariableTupleDestructure ::= TkParenL LocalVariableNestedForTupleDestructure (TkComma LocalVariableNestedForTupleDestructure)* TkParenR
LocalVariableSkipArgument ::= TkUnderscore
LocalVariableSkipArguments ::= TkVariadic LocalVariableSingleIdentifier?
LocalVariableAttributeBinding ::= Identifier TkAssign LocalVariableNestedForAttributeBinding
LocalVariableNestedForObjectDestructure ::= LocalVariableAttributeBinding | LocalVariableSingleIdentifier | LocalVariableSkipArgument | LocalVariableSkipArguments
LocalVariableNestedForTupleDestructure ::= LocalVariableTupleDestructure | LocalVariableObjectDestructure | LocalVariableSingleIdentifier | LocalVariableSkipArgument | LocalVariableSkipArguments
LocalVariableNestedForAttributeBinding ::= LocalVariableTupleDestructure | LocalVariableObjectDestructure | LocalVariableSingleIdentifier

// Assignment
AssignmentStatement ::= Expression+ TkAssign Expression

// Patterns
PatternStatement ::= PatternStatementFlavourDestructuring | PatternStatementFlavourNonDestructuring | PatternStatementFlavourElseCase | PatternStatementFlavourElse
PatternStatementFlavourDestructuring ::= KwIs PatternGroupDestructure (TkComma PatternGroupDestructure)* PatternGuard? InnerScope
PatternStatementFlavourNonDestructuring ::= BooleanComparisonOp PatternVariantExpression (TkComma PatternVariantExpression)* InnerScope
PatternStatementFlavourElseCase ::= PatternVariantElseCase
PatternStatementFlavourElse ::= PatternVariantElse InnerScope

PatternGroupDestructure ::= PatternVariantTupleDestructure | PatternVariantObjectDestructure

PatternVariantSkipArgument ::= TkUnderscore
PatternVariantSkipArguments ::= TkVariadic PatternVariantSingleIdentifier?
PatternVariantSingleIdentifier ::= KwMut? Identifier
PatternVariantObjectDestructure ::= TypeSingle TkParenL PatternVariantNestedForObjectDestructure (TkComma PatternVariantNestedForObjectDestructure)* TkParenR
PatternVariantTupleDestructure ::= TkParenL PatternVariantNestedForTupleDestructure (TkComma PatternVariantNestedForTupleDestructure)* TkParenR
PatternVariantAttributeBinding ::= Identifier TkAssign PatternVariantNestedForAttributeBinding
PatternVariantLiteral ::= LiteralNumber | LiteralString | LiteralBoolean
PatternVariantExpression ::= Expression
PatternVariantElse ::= KwElse
PatternVariantElseCase ::= KwElse CaseExpression
PatternVariantNestedForObjectDestructure ::= PatternVariantAttributeBinding | PatternVariantSingleIdentifier | PatternVariantSkipArguments
PatternVariantNestedForTupleDestructure ::= PatternVariantTupleDestructure | PatternVariantObjectDestructure | PatternVariantSingleIdentifier | PatternVariantLiteral | PatternVariantSkipArgument | PatternVariantSkipArguments
PatternVariantNestedForAttributeBinding ::= PatternVariantTupleDestructure | PatternVariantObjectDestructure | PatternVariantSingleIdentifier | PatternVariantLiteral

PatternGuard ::= KwAnd Expression

// Operators
BinaryOpPrecedenceLevel1 ::= KwOr
BinaryOpPrecedenceLevel2 ::= KwAnd
BinaryOpPrecedenceLevel3 ::= KwIs
BinaryOpPrecedenceLevel4 ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt | TkSs
BinaryOpPrecedenceLevel5 ::= TkAdd | TkSub | TkAddAssign | TkSubAssign
BinaryOpPrecedenceLevel6 ::= TkMul | TkDiv | TkRem | TkMod | TkExp | TkMulAssign | TkDivAssign | TkRemAssign | TkModAssign | TkExpAssign
BooleanComparisonOp ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt
UnaryOp ::= KwAsync
PostfixOp ::= PostfixOpMemberAccess | PostfixOpEarlyReturn | PostfixOpFunctionCall | PostfixOpNotKeyword
PostfixOpFunctionCall ::= GenericArguments? FunctionCallArguments TkVariadic?
PostfixOpMemberAccess ::= PostfixOpMemberAccessRuntime | PostfixOpMemberAccessStatic
PostfixOpMemberAccessRuntime ::= TkDot (Identifier | LxDecInteger)
PostfixOpMemberAccessStatic ::= TkDblColon Identifier
PostfixOpEarlyReturn ::= TkQst
PostfixOpNotKeyword ::= TkDot KwNot

// Conventions
Convention ::= ConventionMut | ConventionRef | ConventionMov
ConventionMut ::= TkBorrow KwMut
ConventionRef ::= TkBorrow
ConventionMov ::=

// Object Initialization
ObjectInitialization ::= TypeSingle ObjectInitializerArguments
ObjectInitializerArguments ::= TkParenL (ObjectInitializerArgument (TkComma ObjectInitializerArgument)*)? TkParenR
ObjectInitializerArgument ::= ObjectInitializerArgumentNamed | ObjectInitializerArgumentNormal
ObjectInitializerArgumentNormal ::= Identifier
ObjectInitializerArgumentNamed ::= ObjectInitializerArgumentNamedKey TkAssign Expression
ObjectInitializerArgumentNamedKey ::= Identifier | KwSup | KwElse

// Lambda (Todo)
//LambdaPrototype ::= LambdaSubroutinePrototype | LambdaCoroutinePrototype
//LambdaSubroutinePrototype ::= KwFun GenericParameters? FunctionParameters TkArrowR Type LambdaCaptureBlock WhereBlock? FunctionImplementation
//LambdaCoroutinePrototype ::= KwCor GenericParameters? FunctionParameters TkArrowR Type LambdaCaptureBlock WhereBlock? FunctionImplementation
//LambdaCaptureBlock ::= KwWith TkBrackL (LambdaCaptureItem (TkComma LambdaCaptureItem)*) TkBrackR
//LambdaCaptureItem ::= LambdaCaptureItemNamed | LambdaCaptureItemNormal
//LambdaCaptureItemNormal ::= Convention Expression
//LambdaCaptureItemNamed ::= Identifier TkAssign Convention Expression

// Types
Type ::= TypeOptional | TypeUnion | TypeTuple | TypeSingle
TypeNonUnion ::= TypeSingle | TypeTuple | TypeOptional
TypeOptional ::= TkQst Type
TypeUnion ::= TypeNonUnion (TkUnion TypeNonUnion)*
TypeTuple ::= TkParenL (Type (TkComma Type)*)? TkParenR
TypeSingle ::= (Identifier TkDblColon)* TypeParts
TypeParts ::= TypePartFirst TypePart*
TypePartFirst ::= GenericIdentifier
TypePart ::= TkDblColon (GenericIdentifier | LxDecInteger)

// Identifiers
Identifier ::= LxIdentifier
UpperIdentifier ::= LxUpperIdentifier
GenericIdentifier ::= UpperIdentifier GenericArguments?

// Literals
Literal ::= LiteralNumber | LiteralString | LiteralTuple | LiteralArray | LiteralRegex | LiteralBoolean
LiteralNumber ::= LiteralNumberBase10 | LiteralNumberBase2 | LiteralNumberBase16
LiteralString ::= LxDoubleQuoteStr
LiteralTuple ::= LiteralTuple0Items | LiteralTuple1Items | LiteralTupleNItems
LiteralArray ::= LiteralArray0Items | LiteralArrayNItems
LiteralRegex ::= LxRegex
LiteralBoolean ::= KwTrue | KwFalse

// Numbers
LiteralNumberBase16 ::= LxHexDigits NumericPostfixType?
LiteralNumberBase2 ::= LxBinDigits NumericPostfixType?
LiteralNumberBase10 ::= LiteralNumberBase10Float | LiteralNumberBase10Integer
LiteralNumberBase10Integer ::= NumericPrefixOp? LxDecInteger NumericPostfixType?
LiteralNumberBase10Float ::= NumericPrefixOp? LxDecDecimal NumericPostfixType?
NumericPrefixOp ::= TkAdd | TkSub
NumericPostfixType ::= TkUnderscope ("i8" | "i16" | "i32" | "i64" | "i128" | "i256" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "f8" | "f16" | "f32" | "f64" | "f128" | "f256")

// Tuples
LiteralTuple0Items ::= TkParenL TkParenR
LiteralTuple1Items ::= TkParenL Expression TkComma TkParenR
LiteralTupleNItems ::= TkParenL (Expression (TkComma Expression)*) TkParenR

// Arrays
LiteralArray0Items ::= TkBrackL Type TkBrackR
LiteralArrayNItems ::= TkBrackL (Expression (TkComma Expression)*) TkBrackR

// Global Constants
GlobalConstantValue ::= LiteralNumber | LiteralString | GlobalConstantLiteralTuple | GlobalConstantLiteralArray | LiteralRegex | LiteralBoolean | GlobalConstantObjectInitialization
GlobalConstantLiteralTuple ::= LiteralTuple0Items | GlobalConstantLiteralTuple1Items | GlobalConstantLiteralTupleNItems
GlobalConstantLiteralTuple1Items ::= TkParenL GlobalConstant TkComma TkParenR
GlobalConstantLiteralTupleNItems ::= TkParenL (GlobalConstant (TkComma GlobalConstantValue)*) TkParenR
GlobalConstantLiteralArray ::= LiteralArray0Items | GlobalConstantLiteralArrayNItems
GlobalConstantLiteralArrayNItems ::= TkBrackL (GlobalConstant (TkComma GlobalConstantValue)*) TkBrackR
GlobalConstantObjectInitialization ::= TypeSingle GlobalConstantObjectInitializerArguments
GlobalConstantObjectInitializerArguments ::= TkParenL (GlobalConstantObjectInitializerArgumentNamed (TkComma GlobalConstantObjectInitializerArgumentNamed)*)? TkParenR
GlobalConstantObjectInitializerArgumentNamed ::= Identifier TkAssign GlobalConstantValue
