{
    parserClass="org.intellij.sdk.language.parser.SppParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Spp"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.intellij.sdk.language.psi.SppTypes"
    elementTypeClass="org.intellij.sdk.language.psi.SppElementType"
    tokenTypeClass="org.intellij.sdk.language.psi.SppTokenType"

    tokens = [
        line_comment = "regexp:#.*"
        block_comment = "regexp:##[^#]*##"

        TkEq = "=="
        TkNe = "!="
        TkLe = "<="
        TkGe = ">="
        TkLt = "<"
        TkGt = ">"

        TkAdd = "+"
        TkSub = "-"
        TkMul = "*"
        TkDiv = "/"
        TkRem = "%"
        TkMod = "%%"
        TkExp = "**"

        TkAddAssign = "+="
        TkSubAssign = "-="
        TkMulAssign = "*="
        TkDivAssign = "/="
        TkRemAssign = "%="
        TkModAssign = "%%="
        TkExpAssign = "**="

        TkParenL = "("
        TkParenR = ")"
        TkBrackL = "["
        TkBrackR = "]"
        TkBraceL = "{"
        TkBraceR = "}"

        TkQst = "?"
        TkDot = "."
        TkDblDot = ".."
        TkColon = ":"
        TkDblColon = "::"

        TkBorrow = "&"
        TkVerticalBar = "|"

        TkComma = ","
        TkAssign = "="
        TkArrowR = "->"
        TkAt = "@"
        TkUnderscore = "_"

        TkEOF = "<EOF>"
        TkWhitespace = " "
        TkNewLine = "\n"
        TkDollar = "$"

        KwCls = "cls"
        KwSup = "sup"
        KwFun = "fun"
        KwCor = "cor"
        KwUse = "use"
        KwExt = "ext"
        KwCmp = "cmp"
        KwLet = "let"
        KwMut = "mut"
        KwRet = "ret"
        KwGen = "gen"
        KwCase = "case"
        KwElse = "else"
        KwLoop = "loop"
        KwSkip = "skip"
        KwExit = "exit"
        KwWith = "with"
        KwWhere = "where"
        KwType = "type"
        KwCaps = "caps"
        KwAs = "as"
        KwIs = "is"
        KwTrue = "true"
        KwFalse = "false"
        KwSelf = "self"
        KwSelfType = "Self"
        KwAnd = "and"
        KwOr = "or"
        KwNot = "not"
        KwOf = "of"
        KwIn = "in"
        KwAsync = "async"

        LxRegex = "regexp:r\".*\""
        LxIdentifier = "regexp:[a-z][_a-zA-Z0-9]*"
        LxUpperIdentifier = "regexp:[A-Z][_a-zA-Z0-9]*"
        LxBinDigits = "regexp:0b[01]+"
        LxHexDigits = "regexp:0x[0-9a-fA-F]+"
        LxDecInteger = "regexp:[0-9]([0-9_]*[0-9])?"
        LxDecDecimal = "regexp:[0-9]([0-9_]*[0-9])?\.[0-9]([0-9_]*[0-9])?"
        LxDoubleQuoteStr = "regexp:\"[^\"]*\""
    ]
}


// Program
Program ::= ModulePrototype

// Module
ModulePrototype ::= ModuleImplementation <<eof>>
ModuleImplementation ::= ModuleMember*
ModuleMember ::= FunctionPrototype | ClassPrototype | SupPrototypeExtension | SupPrototypeFunctions | GlobalUseStatement | GlobalTypeStatement | GlobalCmpStatement

// Class
ClassPrototype ::= Annotation* KwCls UpperIdentifier GenericParameters? WhereBlock? ClassImplementation
ClassImplementation ::= TkBraceL ClassMember* TkBraceR
ClassMember ::= ClassAttribute
ClassAttribute ::= Annotation* Identifier TkColon Type ClassAttributeDefaultValue?
ClassAttributeDefaultValue ::= TkAssign Expression

// Superimposition
SupPrototypeFunctions ::= KwSup GenericParameters? Type WhereBlock? SupImplementation
SupPrototypeExtension ::= KwSup GenericParameters? Type KwExt Type WhereBlock? SupImplementation
SupImplementation ::= TkBraceL SupMember* TkBraceR
SupMember ::= SupMethodPrototype | SupTypeStatement | SupCmpStatement
SupMethodPrototype ::= FunctionPrototype
SupTypeStatement ::= Annotation* TypeStatement
SupCmpStatement ::= Annotation* CmpStatement

// Function
FunctionPrototype ::= CoroutinePrototype | SubroutinePrototype
SubroutinePrototype ::= Annotation* KwFun Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
CoroutinePrototype ::= Annotation* KwCor Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
FunctionImplementation ::= TkBraceL FunctionMember* TkBraceR
FunctionMember ::= Statement
FunctionCallArguments ::= TkParenL (FunctionCallArgument (TkComma FunctionCallArgument)*)? TkParenR
FunctionCallArgument ::= FunctionCallArgumentNamed | FunctionCallArgumentUnnamed
FunctionCallArgumentUnnamed ::= Convention? TkDblDot? Expression
FunctionCallArgumentNamed ::= Identifier TkAssign Convention? Expression
FunctionParameters ::= TkParenL (FunctionParameter (TkComma FunctionParameter)*)? TkParenR
FunctionParameter ::= FunctionParameterSelfWithArbitraryType | FunctionParameterVariadic | FunctionParameterOptional | FunctionParameterRequired | FunctionParameterSelf
FunctionParameterSelf ::= KwMut? Convention? KwSelf
FunctionParameterSelfWithArbitraryType ::= KwMut? KwSelf TkColon Type
FunctionParameterRequired ::= LocalVariable TkColon Type
FunctionParameterOptional ::= LocalVariable TkColon Type TkAssign Expression
FunctionParameterVariadic ::= TkDblDot LocalVariable TkColon Type

// Generics
GenericArguments ::= TkBrackL (GenericArgument (TkComma GenericArgument)*)? TkBrackR
GenericArgument ::= GenericTypeArgumentNamed | GenericTypeArgumentUnnamed | GenericCompArgumentNamed | GenericCompArgumentUnnamed
GenericTypeArgumentUnnamed ::= Type
GenericTypeArgumentNamed ::= UpperIdentifier TkAssign Type
GenericCompArgumentUnnamed ::= CmpValue
GenericCompArgumentNamed ::= Identifier TkAssign CmpValue
GenericInlineConstraints ::= TkColon (Type (TkAdd Type)*)
GenericParameters ::= TkBrackL (GenericParameter (TkComma GenericParameter)*)? TkBrackR
GenericParameter ::= GenericTypeParameterVariadic | GenericTypeParameterOptional | GenericTypeParameterRequired | GenericCompParameterVariadic | GenericCompParameterOptional | GenericCompParameterRequired
GenericTypeParameterRequired ::= UpperIdentifier GenericInlineConstraints?
GenericTypeParameterOptional ::= UpperIdentifier GenericInlineConstraints? TkAssign Type
GenericTypeParameterVariadic ::= TkDblDot UpperIdentifier GenericInlineConstraints?
GenericCompParameterRequired ::= KwCmp TkDblDot Identifier TkColon Type
GenericCompParameterOptional ::= KwCmp Identifier TkColon Type TkAssign CmpValue
GenericCompParameterVariadic ::= KwCmp Identifier TkColon Type

// Constraints
WhereBlock ::= KwWhere WhereBlockConstraintsGroup
WhereBlockConstraintsGroup ::= TkBrackL (WhereBlockConstraints (TkComma WhereBlockConstraints)*)? TkBrackR
WhereBlockConstraints ::= Type (TkComma Type)* TkColon Type (TkAdd Type)*

// Annotation
Annotation ::= TkAt Identifier

// Expressions
Expression ::= BinaryExpressionLevel1
BinaryExpressionLevel1 ::= BinaryExpressionLevel2 (BinaryOpPrecedenceLevel1 BinaryExpressionLevel1)*
BinaryExpressionLevel2 ::= BinaryExpressionLevel3 (BinaryOpPrecedenceLevel2 BinaryExpressionLevel2)*
BinaryExpressionLevel3 ::= BinaryExpressionLevel4 (BinaryOpPrecedenceLevel3 PatternGroupDestructure)*
BinaryExpressionLevel4 ::= BinaryExpressionLevel5 (BinaryOpPrecedenceLevel4 BinaryExpressionLevel4)*
BinaryExpressionLevel5 ::= BinaryExpressionLevel6 (BinaryOpPrecedenceLevel5 BinaryExpressionLevel5)*
BinaryExpressionLevel6 ::= UnaryExpression (BinaryOpPrecedenceLevel6 BinaryExpressionLevel6)*
UnaryExpression ::= UnaryOp* PostfixExpression
PostfixExpression ::= PrimaryExpression PostfixOp*
PrimaryExpression ::= LambdaExpression | Literal | ObjectInitialization | ParenthesizedExpression | Identifier | Type | CaseExpression | LoopExpression | WithExpression | GenExpression | InnerScope | SelfKeyword | TkDblDot
ParenthesizedExpression ::= TkParenL Expression TkParenR
SelfKeyword ::= KwSelf

// Advanced Expressions
CaseExpression ::= CaseExpressionPatterns | CaseExpressionSimple
CaseExpressionPatterns ::= KwCase Expression KwOf CaseExpressionBranch+
CaseExpressionSimple ::= KwCase Expression InnerScope CaseExpressionBranch*
LoopExpression ::= KwLoop LoopExpressionCondition InnerScope LoopElseExpression?
LoopExpressionCondition ::= LoopExpressionConditionIterable | LoopExpressionConditionBoolean
LoopExpressionConditionBoolean ::= Expression
LoopExpressionConditionIterable ::= LocalVariable KwIn Expression
LoopElseExpression ::= KwElse InnerScope
GenExpression ::= GenExpressionUnroll | GenExpressionNormal
GenExpressionNormal ::= GenExpressionNormalWithExpression | GenExpressionNormalNoExpression
GenExpressionNormalWithExpression ::= KwGen Convention? Expression
GenExpressionNormalNoExpression ::= KwGen
GenExpressionUnroll ::= KwGen KwWith Expression

// Statements
RetStatement ::= KwRet Expression?
ExitStatement ::= KwExit+ (KwSkip | Expression)?
SkipStatement ::= KwSkip
InnerScope ::= TkBraceL Statement* TkBraceR
Statement ::= UseStatement | LetStatement | RetStatement | ExitStatement | SkipStatement | AssignmentStatement | Expression

// Typedef
GlobalUseStatement ::= Annotation* UseStatement
GlobalTypeStatement ::= Annotation* TypeStatement
UseStatement ::= KwUse TypeSimple
TypeStatement ::= KwType UpperIdentifier GenericParameters? TkAssign Type

// Variables
CmpStatement ::= KwCmp LocalVariableSingleIdentifier TkColon Type TkAssign CmpValue
GlobalCmpStatement ::= Annotation* CmpStatement
LetStatement ::= LetStatementInitialized | LetStatementUninitialized
LetStatementInitialized ::= KwLet LocalVariable TkAssign Expression
LetStatementUninitialized ::= KwLet LocalVariable TkColon Type
LocalVariable ::= LocalVariableDestructureTuple | LocalVariableDestructureArray | LocalVariableSingleIdentifier | LocalVariableDestructureObject
LocalVariableSkipArgument ::= TkUnderscore
LocalVariableSkipArguments ::= TkDblDot LocalVariableSingleIdentifier?
LocalVariableSingleIdentifier ::= KwMut? Identifier LocalVariableSingleIdentifierAlias?
LocalVariableSingleIdentifierAlias ::= KwAs Identifier
LocalVariableDestructureArray ::= TkBrackL LocalVariableNestedForDestructureArray (TkComma LocalVariableNestedForDestructureArray)* TkBrackR
LocalVariableDestructureTuple ::= TkParenL LocalVariableNestedForDestructureTuple (TkComma LocalVariableNestedForDestructureTuple)* TkParenR
LocalVariableDestructureObject ::= TypeSimple TkParenL LocalVariableNestedForDestructureObject (TkComma LocalVariableNestedForDestructureObject)* TkParenR
LocalVariableAttributeBinding ::= Identifier TkAssign LocalVariableNestedForAttributeBinding
LocalVariableNestedForDestructureArray ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier | LocalVariableSkipArguments | LocalVariableSkipArgument
LocalVariableNestedForDestructureTuple ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier | LocalVariableSkipArguments | LocalVariableSkipArgument
LocalVariableNestedForDestructureObject ::= LocalVariableAttributeBinding | LocalVariableSingleIdentifier | LocalVariableSkipArguments
LocalVariableNestedForAttributeBinding ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier

// Assignment
AssignmentStatement ::= Expression (TkComma Expression)* TkAssign Expression (TkComma Expression)*

// Patterns
CaseExpressionBranchSimple ::= PatternStatementFlavourElseCase | PatternStatementFlavourElse
CaseExpressionBranch ::= PatternStatementFlavourDestructuring | PatternStatementFlavourNonDestructuring | CaseExpressionBranchSimple

PatternStatementFlavourDestructuring ::= KwIs PatternGroupDestructure (TkComma PatternGroupDestructure)* PatternGuard? InnerScope
PatternStatementFlavourNonDestructuring ::= BooleanComparisonOp PatternVariantExpression (TkComma PatternVariantExpression)* InnerScope
PatternStatementFlavourElseCase ::= PatternVariantElseCase
PatternStatementFlavourElse ::= PatternVariantElse InnerScope
PatternGroupDestructure ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject

PatternVariantSkipArgument ::= TkUnderscore
PatternVariantSkipArguments ::= TkDblDot PatternVariantSingleIdentifier?
PatternVariantSingleIdentifier ::= KwMut? Identifier LocalVariableSingleIdentifierAlias?
PatternVariantDestructureArray ::= TkBrackL PatternVariantNestedForDestructureArray (TkComma PatternVariantNestedForDestructureArray)* TkBrackR
PatternVariantDestructureTuple ::= TkParenL PatternVariantNestedForDestructureTuple (TkComma PatternVariantNestedForDestructureTuple)* TkParenR
PatternVariantDestructureObject ::= TypeSimple TkParenL (PatternVariantNestedForDestructureObject (TkComma PatternVariantNestedForDestructureObject)*)? TkParenR
PatternVariantAttributeBinding ::= Identifier TkAssign PatternVariantNestedForAttributeBinding
PatternVariantLiteral ::= LiteralFloat | LiteralInteger | LiteralString | LiteralBoolean
PatternVariantExpression ::= Expression
PatternVariantElse ::= KwElse
PatternVariantElseCase ::= KwElse CaseExpression
PatternVariantNestedForDestructureArray ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral | PatternVariantSkipArguments | PatternVariantSkipArgument
PatternVariantNestedForDestructureTuple ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral | PatternVariantSkipArguments | PatternVariantSkipArgument
PatternVariantNestedForDestructureObject ::= PatternVariantAttributeBinding | PatternVariantSingleIdentifier | PatternVariantSkipArguments
PatternVariantNestedForAttributeBinding ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral
PatternGuard ::= KwAnd Expression

// Operators
BinaryOpPrecedenceLevel1 ::= KwOr
BinaryOpPrecedenceLevel2 ::= KwAnd
BinaryOpPrecedenceLevel3 ::= KwIs
BinaryOpPrecedenceLevel4 ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt | TkSs
BinaryOpPrecedenceLevel5 ::= TkAdd | TkSub | TkAddAssign | TkSubAssign
BinaryOpPrecedenceLevel6 ::= TkMul | TkDiv | TkRem | TkMod | TkExp | TkMulAssign | TkDivAssign | TkRemAssign | TkModAssign | TkExpAssign
BooleanComparisonOp ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt

UnaryOp ::= UnaryOpAsyncCall
UnaryOpAsyncCall ::= KwAsync

PostfixOp ::= PostfixOpMemberAccess | PostfixOpEarlyReturn | PostfixOpFunctionCall | PostfixOpNotKeyword
PostfixOpFunctionCall ::= GenericArguments? FunctionCallArguments TkDblDot?
PostfixOpMemberAccess ::= PostfixOpMemberAccessRuntime | PostfixOpMemberAccessStatic
PostfixOpMemberAccessRuntime ::= TkDot (Identifier | LxDecInteger)
PostfixOpMemberAccessStatic ::= TkDblColon Identifier
PostfixOpEarlyReturn ::= TkQst
PostfixOpNotKeyword ::= TkDot KwNot

// Conventions
Convention ::= ConventionMut | ConventionRef
ConventionMut ::= TkBorrow KwMut
ConventionRef ::= TkBorrow

// Object Initialization
ObjectInitialization ::= TypeSimple ObjectInitializerArguments
ObjectInitializerArguments ::= TkParenL (ObjectInitializerArgument (TkComma ObjectInitializerArgument)*)? TkParenR
ObjectInitializerArgument ::= ObjectInitializerArgumentNamed | ObjectInitializerArgumentNormal
ObjectInitializerArgumentNormal ::= TkDblDot? Identifier
ObjectInitializerArgumentNamed ::= Identifier TkAssign Expression

// Lambda
LambdaExpression ::= KwCor? LambdaExpressionParameterAndCaptureGroup Expression
LambdaExpressionParameterAndCaptureGroup ::= TkVerticalBar (LambdaExpressionParameter (TkComma LambdaExpressionParameter)*)? TkVerticalBar LambdaExpressionCaptureGroup? TkVerticalBar
LambdaExpressionCaptureGroup ::= KwCaps (LambdaExpressionCaptureItem (TkComma LambdaExpressionCaptureItem)*)?
LambdaExpressionCaptureItem ::= Convention? Identifier
LambdaExpressionParameter ::= FunctionParameterVariadic | FunctionParameterOptional | FunctionParameterRequired

// Types
Type ::= TypeParenthesized | TypeArray | TypeTuple | TypeBinaryExpressionLevel1
TypeSimple ::= TypeUnaryOpNamespace* TypeSingle
TypeBinaryExpressionLevel1 ::= TypeBinaryExpressionLevel2 (TypeBinaryOpPrecedenceLevel1 TypeBinaryExpressionLevel1)*
TypeBinaryExpressionLevel2 ::= TypeBinaryPostfixExpression (TypeBinaryOpPrecedenceLevel2 TypeBinaryExpressionLevel2)*
TypeBinaryOpPrecedenceLevel1 ::= KwAnd
TypeBinaryOpPrecedenceLevel2 ::= KwOr
TypeBinaryPostfixExpression ::= TypeUnaryExpression TypePostfixOp*
TypeUnaryExpression ::= TypeUnaryOp* TypeSingle
TypeParenthesized ::= TkParenL Type TkParenR
TypeTuple ::= TypeTuple1Items | TypeTupleNItems
TypeArray ::= TkBrackL Type TkComma LxDecInteger TkBrackR
TypeSingle ::= GenericIdentifier | TypeSelf
TypeSelf ::= KwSelfType
TypeUnaryOp ::= TypeUnaryOpNamespace | TypeUnaryOpBorrow
TypeUnaryOpNamespace ::= Identifier TkDblColon
TypeUnaryOpBorrow ::= Convention
TypePostfixOp ::= TypePostfixOpNestedType | TypePostfixOpOptionalType
TypePostfixOpNestedType ::= TkDblColon TypeSingle
TypePostfixOpOptionalType ::= TkQst
TypeTuple1Items ::= TkParenL Type TkComma TkParenR
TypeTupleNItems ::= TkParenL (Type (TkComma Type)*)? TkParenR

// Identifiers
Identifier ::= LxIdentifier
UpperIdentifier ::= LxUpperIdentifier
GenericIdentifier ::= UpperIdentifier GenericArguments?

// Literals
Literal ::= LiteralFloat | LiteralInteger | LiteralString | LiteralTuple | LiteralArray | LiteralBoolean
LiteralFloat ::= LiteralFloatBase10
LiteralInteger ::= LiteralIntegerBase10 | LiteralIntegerBase2 | LiteralIntegerBase16
LiteralString ::= LxDoubleQuoteStr
LiteralTuple ::= LiteralTuple0Items | LiteralTuple1Items | LiteralTupleNItems
LiteralArray ::= LiteralArray0Items | LiteralArrayNItems
LiteralBoolean ::= KwTrue | KwFalse

// Numbers
LiteralFloatBase10 ::= NumericPrefixOp? LxDecDecimal TkDot LxDecDecimal NumericPostfixType?
LiteralIntegerBase16 ::= NumericPrefixOp? LxHexDigits NumericPostfixType?
LiteralIntegerBase2 ::= NumericPrefixOp? LxBinDigits NumericPostfixType?
LiteralIntegerBase10 ::= NumericPrefixOp? LxDecInteger NumericPostfixType?
NumericPrefixOp ::= TkAdd | TkSub
NumericPostfixType ::= TkUnderscore ("i8" | "i16" | "i32" | "i64" | "i128" | "i256" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "f8" | "f16" | "f32" | "f64" | "f128" | "f256")

// Tuples
LiteralTuple0Items ::= TkParenL TkParenR
LiteralTuple1Items ::= TkParenL Expression TkComma TkParenR
LiteralTupleNItems ::= TkParenL (Expression (TkComma Expression)*) TkParenR

// Arrays
LiteralArray0Items ::= TkBrackL Type TkBrackR
LiteralArrayNItems ::= TkBrackL (Expression (TkComma Expression)*) TkBrackR

// Global Constants
CmpValue ::= LiteralFloat | LiteralInteger | LiteralString | CmpLiteralTuple | CmpLiteralArray | LiteralBoolean | CmpObjectInitialization | Identifier
CmpLiteralTuple ::= LiteralTuple0Items | CmpLiteralTuple1Items | CmpLiteralTupleNItems
CmpLiteralTuple1Items ::= TkParenL CmpStatement TkComma TkParenR
CmpLiteralTupleNItems ::= TkParenL (CmpStatement (TkComma CmpValue)*) TkParenR
CmpLiteralArray ::= LiteralArray0Items | CmpLiteralArrayNItems
CmpLiteralArrayNItems ::= TkBrackL (CmpStatement (TkComma CmpValue)*) TkBrackR
CmpObjectInitialization ::= TypeSimple CmpObjectInitializerArguments
CmpObjectInitializerArguments ::= TkParenL (CmpObjectInitializerArgumentNamed (TkComma CmpObjectInitializerArgumentNamed)*)? TkParenR
CmpObjectInitializerArgumentNamed ::= Identifier TkAssign CmpValue
