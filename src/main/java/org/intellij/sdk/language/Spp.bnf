{
    parserClass="org.intellij.sdk.language.parser.SppParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Spp"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.intellij.sdk.language.psi.SppTypes"
    elementTypeClass="org.intellij.sdk.language.psi.SppElementType"
    tokenTypeClass="org.intellij.sdk.language.psi.SppTokenType"

    tokens = [
        line_comment = "regexp:#.*"
        block_comment = "regexp:##[^#]*##"

        TkEq = "=="
        TkNe = "!="
        TkLe = "<="
        TkGe = ">="
        TkLt = "<"
        TkGt = ">"
        TkSs = "<=>"

        TkAdd = "+"
        TkSub = "-"
        TkMul = "*"
        TkDiv = "/"
        TkRem = "%"
        TkMod = "%%"
        TkExp = "**"
        TkAddAssign = "+="
        TkSubAssign = "-="
        TkMulAssign = "*="
        TkDivAssign = "/="
        TkRemAssign = "%="
        TkModAssign = "%%="
        TkExpAssign = "**="

        TkParenL = "("
        TkParenR = ")"
        TkBrackL = "["
        TkBrackR = "]"
        TkBraceL = "{"
        TkBraceR = "}"

        TkQst = "?"
        TkVariadic = ".."
        TkColon = ":"

        TkBorrow = "&"
        TkUnion = "|"

        TkDot = "."
        TkDblColon = "::"

        TkComma = ","
        TkAssign = "="
        TkArrowR = "->"
        TkAt = "@"
        TkUnderscore = "_"

        TkEOF = "<EOF>"
        TkWhitespace = " "
        TkNewLine = "\n"
        TkDollar = "$"

        KwCls = "cls"
        KwSup = "sup"
        KwFun = "fun"
        KwCor = "cor"
        KwUse = "use"
        KwExt = "ext"

        KwCmp = "cmp"
        KwLet = "let"
        KwMut = "mut"
        KwPin = "pin"
        KwRel = "rel"

        KwCase = "case"
        KwElse = "else"
        KwLoop = "loop"
        KwWith = "with"
        KwSkip = "skip"
        KwExit = "exit"
        KwStep = "step"

        KwRet = "ret"
        KwGen = "gen"

        KwWhere = "where"
        KwAs = "as"
        KwIs = "is"

        KwTrue = "true"
        KwFalse = "false"
        KwSelf = "self"
        KwSelfType = "Self"

        KwAnd = "and"
        KwOr = "or"
        KwNot = "not"

        KwOf = "of"
        KwIn = "in"
        KwAsync = "async"

        LxRegex = "regexp:r\".*\""
        LxIdentifier = "regexp:[a-z][_a-zA-Z0-9]*"
        LxUpperIdentifier = "regexp:[A-Z][_a-zA-Z0-9]*"
        LxBinDigits = "regexp:0b[01]+"
        LxHexDigits = "regexp:0x[0-9a-fA-F]+"
        LxDecInteger = "regexp:[0-9]([0-9_]*[0-9])?"
        LxDecDecimal = "regexp:[0-9]([0-9_]*[0-9])?\.[0-9]([0-9_]*[0-9])?"
        LxDoubleQuoteStr = "regexp:\"[^\"]*\""
    ]
}


// Program
Program ::= ModulePrototype

// Module
ModulePrototype ::= ModuleImplementation <<eof>>
ModuleImplementation ::= ModuleMember*
ModuleMember ::= FunctionPrototype | ClassPrototype | SupPrototypeInheritance | SupPrototypeFunctions | GlobalUseStatement | GlobalConstant

// Class
ClassPrototype ::= Annotation* KwCls UpperIdentifier GenericParameters? WhereBlock? ClassImplementation
ClassImplementation ::= TkBraceL ClassMember* TkBraceR
ClassMember ::= ClassAttribute
ClassAttribute ::= Annotation* Identifier TkColon Type

// Superimposition
SupPrototypeFunctions ::= KwSup GenericParameters? Type WhereBlock? SupImplementation
SupPrototypeInheritance ::= KwSup GenericParameters? Type KwExt Type WhereBlock? SupImplementation
SupImplementation ::= TkBraceL SupMember* TkBraceR
SupMember ::= SupMethodPrototype | SupTypedef
SupTypedef ::= Annotation* UseStatement
SupMethodPrototype ::= FunctionPrototype

// Function
FunctionPrototype ::= CoroutinePrototype | SubroutinePrototype
SubroutinePrototype ::= Annotation* KwFun Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
CoroutinePrototype ::= Annotation* KwCor Identifier GenericParameters? FunctionParameters TkArrowR Type WhereBlock? FunctionImplementation
FunctionImplementation ::= TkBraceL FunctionMember* TkBraceR
FunctionMember ::= Statement
FunctionParameters ::= TkParenL (FunctionParameter (TkComma FunctionParameter)*)? TkParenR
FunctionParameter ::= FunctionParameterVariadic | FunctionParameterOptional | FunctionParameterRequired | FunctionParameterSelf
FunctionParameterRequired ::= LocalVariable TkColon Convention Type
FunctionParameterOptional ::= LocalVariable TkColon Convention Type TkAssign Expression
FunctionParameterVariadic ::= TkVariadic LocalVariable TkColon Convention Type
FunctionParameterSelf ::= KwMut? Convention KwSelf
FunctionCallArguments ::= TkParenL (FunctionCallArgument (TkComma FunctionCallArgument)*)? TkParenR
FunctionCallArgument ::= FunctionCallArgumentNamed | FunctionCallArgumentNormal
FunctionCallArgumentNormal ::= Convention TkVariadic? Expression
FunctionCallArgumentNamed ::= Identifier TkAssign Convention Expression

// Generics
GenericParameters ::= TkBrackL (GenericParameter (TkComma GenericParameter)*)? TkBrackR
GenericParameter ::= GenericTypeParameterVariadic | GenericTypeParameterOptional | GenericTypeParameterRequired | GenericCompParameterVariadic | GenericCompParameterOptional | GenericCompParameterRequired
GenericTypeParameterRequired ::= UpperIdentifier GenericInlineConstraints?
GenericTypeParameterOptional ::= UpperIdentifier GenericInlineConstraints? TkAssign Type
GenericTypeParameterVariadic ::= TkVariadic UpperIdentifier GenericInlineConstraints?
GenericCompParameterRequired ::= KwCmp TkVariadic Identifier TkColon Type
GenericCompParameterOptional ::= KwCmp Identifier TkColon Type TkAssign GlobalConstantValue
GenericCompParameterVariadic ::= KwCmp Identifier TkColon Type
GenericArguments ::= TkBrackL (GenericArgument (TkComma GenericArgument)*)? TkBrackR
GenericArgument ::= GenericTypeArgumentNamed | GenericTypeArgumentNormal | GenericCompArgumentNamed | GenericCompArgumentNormal
GenericTypeArgumentNormal ::= Type
GenericTypeArgumentNamed ::= UpperIdentifier TkAssign Type
GenericCompArgumentNormal ::= GlobalConstantValue
GenericCompArgumentNamed ::= Identifier TkAssign GlobalConstantValue
GenericInlineConstraints ::= TkColon (Type (TkAdd Type)*)

// Constraints
WhereBlock ::= KwWhere WhereBlockConstraintsGroup
WhereBlockConstraintsGroup ::= TkBrackL (WhereBlockConstraints (TkComma WhereBlockConstraints)*)? TkBrackR
WhereBlockConstraints ::= Type (TkComma Type)* TkColon Type (TkAdd Type)*

// Annotation
Annotation ::= TkAt Identifier (TkDblColon Identifier)*

// Expressions
Expression ::= BinaryExpressionLevel1
BinaryExpressionLevel1 ::= BinaryExpressionLevel2 (BinaryOpPrecedenceLevel1 BinaryExpressionLevel1)*
BinaryExpressionLevel2 ::= BinaryExpressionLevel3 (BinaryOpPrecedenceLevel2 BinaryExpressionLevel2)*
BinaryExpressionLevel3 ::= BinaryExpressionLevel4 (BinaryOpPrecedenceLevel3 PatternVariantDestructureObject)*
BinaryExpressionLevel4 ::= BinaryExpressionLevel5 (BinaryOpPrecedenceLevel4 BinaryExpressionLevel4)*
BinaryExpressionLevel5 ::= BinaryExpressionLevel6 (BinaryOpPrecedenceLevel5 BinaryExpressionLevel5)*
BinaryExpressionLevel6 ::= UnaryExpression (BinaryOpPrecedenceLevel6 BinaryExpressionLevel6)*
UnaryExpression ::= UnaryOp* PostfixExpression
PostfixExpression ::= PrimaryExpression PostfixOp*
PrimaryExpression ::= Literal | ObjectInitialization | ParenthesizedExpression | Identifier | Type | CaseExpression | LoopExpression | WithExpression | GenExpression | InnerScope | SelfKeyword | TkVariadic  //  | LambdaPrototype
ParenthesizedExpression ::= TkParenL Expression TkParenR
SelfKeyword ::= KwSelf

// Advanced Expressions
CaseExpression ::= CaseExpressionPatterns | CaseExpressionSimple
CaseExpressionPatterns ::= KwCase Expression KwOf CaseExpressionBranch+
CaseExpressionSimple ::= KwCase Expression InnerScope CaseExpressionBranch*
LoopExpression ::= KwLoop LoopExpressionCondition InnerScope LoopElseExpression?
LoopExpressionCondition ::= LoopExpressionConditionIterable | LoopExpressionConditionBoolean
LoopExpressionConditionBoolean ::= Expression
LoopExpressionConditionIterable ::= LocalVariable KwIn Expression
LoopElseExpression ::= KwElse InnerScope
GenExpression ::= GenExpressionUnroll | GenExpressionNormal
GenExpressionNormal ::= GenExpressionNormalWithExpression | GenExpressionNormalNoExpression
GenExpressionNormalWithExpression ::= KwGen Convention WithExpression
GenExpressionNormalNoExpression ::= KwGen
GenExpressionUnroll ::= KwGen KwWith Expression
WithExpression ::= KwWith WithExpressionLhsAlias? Expression InnerScope
WithExpressionLhsAlias ::= LocalVariable TkAssign

// Statements
ReturnStatement ::= KwRet Expression?
ExitStatement ::= KwExit+ (KwSkip | Expression)?
SkipStatement ::= KwSkip
PinStatement ::= KwPin Expression (TkComma Expression)*
RelStatement ::= KwRel Expression (TkComma Expression)*
InnerScope ::= TkBraceL Statement* TkBraceR
Statement ::= UseStatement | LetStatement | ReturnStatement | ExitStatement | SkipStatement | PinStatement | RelStatement | AssignmentStatement | Expression

// Typedef
GlobalUseStatement ::= Annotation* KwUse (UseStatementTypeAlias | UseStatementImport)
UseStatement ::= KwUse UpperIdentifier GenericParameters? TkAssign Type

// Variables
GlobalConstant ::= Annotation* KwCmp LocalVariableSingleIdentifier TkColon Type TkAssign GlobalConstantValue
LetStatement ::= LetStatementInitialized | LetStatementUninitialized
LetStatementInitialized ::= KwLet LocalVariable TkAssign Expression
LetStatementUninitialized ::= KwLet LocalVariable TkColon Type
LocalVariable ::= LocalVariableDestructureTuple | LocalVariableDestructureArray | LocalVariableSingleIdentifier | LocalVariableDestructureObject
LocalVariableSkipArgument ::= TkUnderscore
LocalVariableSkipArguments ::= TkVariadic LocalVariableSingleIdentifier?
LocalVariableSingleIdentifier ::= KwMut? Identifier LocalVariableSingleIdentifierAlias?
LocalVariableSingleIdentifierAlias ::= KwAs Identifier
LocalVariableDestructureArray ::= TkBrackL LocalVariableNestedForDestructureArray (TkComma LocalVariableNestedForDestructureArray)* TkBrackR
LocalVariableDestructureTuple ::= TkParenL LocalVariableNestedForDestructureTuple (TkComma LocalVariableNestedForDestructureTuple)* TkParenR
LocalVariableDestructureObject ::= TypeSingle TkParenL LocalVariableNestedForDestructureObject (TkComma LocalVariableNestedForDestructureObject)* TkParenR
LocalVariableAttributeBinding ::= Identifier TkAssign LocalVariableNestedForAttributeBinding
LocalVariableNestedForDestructureArray ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier | LocalVariableSkipArguments | LocalVariableSkipArgument
LocalVariableNestedForDestructureTuple ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier | LocalVariableSkipArguments | LocalVariableSkipArgument
LocalVariableNestedForDestructureObject ::= LocalVariableAttributeBinding | LocalVariableSingleIdentifier | LocalVariableSkipArguments
LocalVariableNestedForAttributeBinding ::= LocalVariableDestructureArray | LocalVariableDestructureTuple | LocalVariableDestructureObject | LocalVariableSingleIdentifier

// Assignment
AssignmentStatement ::= Expression+ TkAssign Expression+

// Patterns
CaseExpressionBranchSimple ::= PatternStatementFlavourElseCase | PatternStatementFlavourElse
CaseExpressionBranch ::= PatternStatementFlavourDestructuring | PatternStatementFlavourNonDestructuring | CaseExpressionBranchSimple

PatternStatementFlavourDestructuring ::= KwIs PatternGroupDestructure (TkComma PatternGroupDestructure)* PatternGuard? InnerScope
PatternStatementFlavourNonDestructuring ::= BooleanComparisonOp PatternVariantExpression (TkComma PatternVariantExpression)* InnerScope
PatternStatementFlavourElseCase ::= PatternVariantElseCase
PatternStatementFlavourElse ::= PatternVariantElse InnerScope
PatternGroupDestructure ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject

PatternVariantSkipArgument ::= TkUnderscore
PatternVariantSkipArguments ::= TkVariadic PatternVariantSingleIdentifier?
PatternVariantSingleIdentifier ::= KwMut? Identifier LocalVariableSingleIdentifierAlias?
PatternVariantDestructureArray ::= TkBrackL PatternVariantNestedForDestructureArray (TkComma PatternVariantNestedForDestructureArray)* TkBrackR
PatternVariantDestructureTuple ::= TkParenL PatternVariantNestedForDestructureTuple (TkComma PatternVariantNestedForDestructureTuple)* TkParenR
PatternVariantDestructureObject ::= TypeSingle TkParenL (PatternVariantNestedForDestructureObject (TkComma PatternVariantNestedForDestructureObject)*)? TkParenR
PatternVariantAttributeBinding ::= Identifier TkAssign PatternVariantNestedForAttributeBinding
PatternVariantLiteral ::= LiteralFloat | LiteralInteger | LiteralString | LiteralBoolean
PatternVariantExpression ::= Expression
PatternVariantElse ::= KwElse
PatternVariantElseCase ::= KwElse CaseExpression
PatternVariantNestedForDestructureArray ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral | PatternVariantSkipArguments | PatternVariantSkipArgument
PatternVariantNestedForDestructureTuple ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral | PatternVariantSkipArguments | PatternVariantSkipArgument
PatternVariantNestedForDestructureObject ::= PatternVariantAttributeBinding | PatternVariantSingleIdentifier | PatternVariantSkipArguments
PatternVariantNestedForAttributeBinding ::= PatternVariantDestructureArray | PatternVariantDestructureTuple | PatternVariantDestructureObject | PatternVariantSingleIdentifier | PatternVariantLiteral
PatternGuard ::= KwAnd Expression

// Operators
BinaryOpPrecedenceLevel1 ::= KwOr
BinaryOpPrecedenceLevel2 ::= KwAnd
BinaryOpPrecedenceLevel3 ::= KwIs
BinaryOpPrecedenceLevel4 ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt | TkSs
BinaryOpPrecedenceLevel5 ::= TkAdd | TkSub | TkAddAssign | TkSubAssign
BinaryOpPrecedenceLevel6 ::= TkMul | TkDiv | TkRem | TkMod | TkExp | TkMulAssign | TkDivAssign | TkRemAssign | TkModAssign | TkExpAssign
BooleanComparisonOp ::= TkEq | TkNe | TkLe | TkGe | TkLt | TkGt

UnaryOp ::= UnaryOpAsyncCall
UnaryOpAsyncCall ::= KwAsync

PostfixOp ::= PostfixOpMemberAccess | PostfixOpEarlyReturn | PostfixOpFunctionCall | PostfixOpNotKeyword | PostfixOpStepKeyword
PostfixOpFunctionCall ::= GenericArguments? FunctionCallArguments TkVariadic?
PostfixOpMemberAccess ::= PostfixOpMemberAccessRuntime | PostfixOpMemberAccessStatic
PostfixOpMemberAccessRuntime ::= TkDot (Identifier | LxDecInteger)
PostfixOpMemberAccessStatic ::= TkDblColon Identifier
PostfixOpEarlyReturn ::= TkQst
PostfixOpNotKeyword ::= TkDot KwNot
PostfixOpStepKeyword ::= TkDot KwStep

// Conventions
Convention ::= ConventionMut | ConventionRef | ConventionMov
ConventionMut ::= TkBorrow KwMut
ConventionRef ::= TkBorrow
ConventionMov ::=

// Object Initialization
ObjectInitialization ::= TypeSingle ObjectInitializerArguments
ObjectInitializerArguments ::= TkParenL (ObjectInitializerArgument (TkComma ObjectInitializerArgument)*)? TkParenR
ObjectInitializerArgument ::= ObjectInitializerArgumentNamed | ObjectInitializerArgumentNormal
ObjectInitializerArgumentNormal ::= Identifier
ObjectInitializerArgumentNamed ::= ObjectInitializerArgumentNamedKey TkAssign Expression
ObjectInitializerArgumentNamedKey ::= Identifier | KwElse  // todo: will change to "..default" not "else="

// Lambda (Todo)
//LambdaPrototype ::= LambdaSubroutinePrototype | LambdaCoroutinePrototype
//LambdaSubroutinePrototype ::= KwFun GenericParameters? FunctionParameters TkArrowR Type LambdaCaptureBlock WhereBlock? FunctionImplementation
//LambdaCoroutinePrototype ::= KwCor GenericParameters? FunctionParameters TkArrowR Type LambdaCaptureBlock WhereBlock? FunctionImplementation
//LambdaCaptureBlock ::= KwWith TkBrackL (LambdaCaptureItem (TkComma LambdaCaptureItem)*) TkBrackR
//LambdaCaptureItem ::= LambdaCaptureItemNamed | LambdaCaptureItemNormal
//LambdaCaptureItemNormal ::= Convention Expression
//LambdaCaptureItemNamed ::= Identifier TkAssign Convention Expression

// Types
Type ::= TypeOptional | TypeUnion | TypeTuple | TypeSingle
TypeOptional ::= TkQst Type
TypeSingle ::= TypeSingleWithNamespace | TypeSingleWithoutNamespace
TypeSingleWithNamespace ::= Identifier (TkDblColon Identifier)* (TkDblColon GenericIdentifier)+
TypeSingleWithoutNamespace ::= GenericIdentifier (TkDblColon GenericIdentifier)*
TypeTuple ::= TkParenL (Type (TkComma Type)*)? TkParenR
TypeNonUnion ::= TypeSingle | TypeTuple | TypeOptional
TypeUnion ::= TypeNonUnion (TkUnion TypeNonUnion)*

// Identifiers
Identifier ::= LxIdentifier
UpperIdentifier ::= LxUpperIdentifier
GenericIdentifier ::= UpperIdentifier GenericArguments?

// Literals
Literal ::= LiteralFloat | LiteralInteger | LiteralString | LiteralTuple | LiteralArray | LiteralBoolean
LiteralFloat ::= LiteralFloatBase10
LiteralInteger ::= LiteralIntegerBase10 | LiteralIntegerBase2 | LiteralIntegerBase16
LiteralString ::= LxDoubleQuoteStr
LiteralTuple ::= LiteralTuple0Items | LiteralTuple1Items | LiteralTupleNItems
LiteralArray ::= LiteralArray0Items | LiteralArrayNItems
LiteralBoolean ::= KwTrue | KwFalse

// Numbers
LiteralFloatBase10 ::= NumericPrefixOp? LxDecDecimal TkDot LxDecDecimal NumericPostfixType?
LiteralIntegerBase16 ::= NumericPrefixOp? LxHexDigits NumericPostfixType?
LiteralIntegerBase2 ::= NumericPrefixOp? LxBinDigits NumericPostfixType?
LiteralIntegerBase10 ::= NumericPrefixOp? LxDecInteger NumericPostfixType?
NumericPrefixOp ::= TkAdd | TkSub
NumericPostfixType ::= TkUnderscore ("i8" | "i16" | "i32" | "i64" | "i128" | "i256" | "u8" | "u16" | "u32" | "u64" | "u128" | "u256" | "f8" | "f16" | "f32" | "f64" | "f128" | "f256")

// Tuples
LiteralTuple0Items ::= TkParenL TkParenR
LiteralTuple1Items ::= TkParenL Expression TkComma TkParenR
LiteralTupleNItems ::= TkParenL (Expression (TkComma Expression)*) TkParenR

// Arrays
LiteralArray0Items ::= TkBrackL Type TkBrackR
LiteralArrayNItems ::= TkBrackL (Expression (TkComma Expression)*) TkBrackR

// Global Constants
GlobalConstantValue ::= LiteralFloat | LiteralInteger | LiteralString | GlobalConstantLiteralTuple | GlobalConstantLiteralArray | LiteralBoolean | GlobalConstantObjectInitialization
GlobalConstantLiteralTuple ::= LiteralTuple0Items | GlobalConstantLiteralTuple1Items | GlobalConstantLiteralTupleNItems
GlobalConstantLiteralTuple1Items ::= TkParenL GlobalConstant TkComma TkParenR
GlobalConstantLiteralTupleNItems ::= TkParenL (GlobalConstant (TkComma GlobalConstantValue)*) TkParenR
GlobalConstantLiteralArray ::= LiteralArray0Items | GlobalConstantLiteralArrayNItems
GlobalConstantLiteralArrayNItems ::= TkBrackL (GlobalConstant (TkComma GlobalConstantValue)*) TkBrackR
GlobalConstantObjectInitialization ::= TypeSingle GlobalConstantObjectInitializerArguments
GlobalConstantObjectInitializerArguments ::= TkParenL (GlobalConstantObjectInitializerArgumentNamed (TkComma GlobalConstantObjectInitializerArgumentNamed)*)? TkParenR
GlobalConstantObjectInitializerArgumentNamed ::= Identifier TkAssign GlobalConstantValue
